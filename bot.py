import logging
import requests
import time
import schedule
from telegram import Bot
from telegram.error import TelegramError
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
CUSTOM_SIGNATURE = os.getenv('CUSTOM_SIGNATURE', '')
UPDATE_INTERVAL = int(os.getenv('UPDATE_INTERVAL', 5))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤
previous_ton_price = None
previous_usdt_rub = None
previous_freenet_price = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON/USDT
def get_ton_price():
    try:
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd')
        data = response.json()
        return data['the-open-network']['usd']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ TON: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ FREENET/USDT
def get_freenet_price():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API GeckoTerminal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        pool_address = "EQBUxfy9mTrgRhVVJZ-DzyD7Ha_YNfRIx7TTOdsEsGfr7YQk"
        response = requests.get(f"https://api.geckoterminal.com/api/v2/networks/ton/pools/{pool_address}")
        data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        base_token_price_usd = float(data['data']['attributes']['base_token_price_usd'])
        return base_token_price_usd
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ FREENET: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT/RUB
def get_usdt_rub_price():
    try:
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub')
        data = response.json()
        return data['tether']['rub']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT/RUB: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def calculate_percentage_change(current, previous):
    if previous is None or current is None:
        return None
    return ((current - previous) / previous) * 100

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—É—Ä—Å–∞–º–∏
def send_crypto_rates():
    global previous_ton_price, previous_usdt_rub, previous_freenet_price
    
    try:
        ton_price = get_ton_price()
        freenet_price = get_freenet_price()
        usdt_rub = get_usdt_rub_price()
        
        # –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–æ–≤ –≤ —Ä—É–±–ª—è—Ö
        if ton_price and usdt_rub:
            ton_rub = ton_price * usdt_rub
        else:
            ton_rub = None
            
        if freenet_price and usdt_rub:
            freenet_rub = freenet_price * usdt_rub
        else:
            freenet_rub = None
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        ton_change = calculate_percentage_change(ton_price, previous_ton_price)
        freenet_change = calculate_percentage_change(freenet_price, previous_freenet_price)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TON
        ton_line = f"üíé $TON: {ton_price:.3f}$ / {ton_rub:.3f}‚ÇΩ"
        if ton_change is not None:
            change_emoji = "‚¨ÜÔ∏è" if ton_change >= 0 else "‚¨áÔ∏è"
            ton_line += f" {change_emoji} {abs(ton_change):.2f}%"
        message.append(ton_line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å USDT/RUB
        message.append(f"üíµ USDT/RUB: {usdt_rub:.2f}‚ÇΩ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å FREENET
        if freenet_price and freenet_rub:
            freenet_line = f"üåê $FREENET: {freenet_price:.6f}$ / {freenet_rub:.6f}‚ÇΩ"
            if freenet_change is not None:
                change_emoji = "‚¨ÜÔ∏è" if freenet_change >= 0 else "‚¨áÔ∏è"
                freenet_line += f" {change_emoji} {abs(freenet_change):.2f}%"
            message.append(freenet_line)
        else:
            message.append("üåê $FREENET: –ù/–î")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        final_message = "\n\n".join(message)
        if CUSTOM_SIGNATURE:
            final_message += f"\n\n{CUSTOM_SIGNATURE}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(
            chat_id=CHAT_ID, 
            text=final_message, 
            parse_mode='Markdown',
            disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        previous_ton_price = ton_price
        previous_usdt_rub = usdt_rub
        previous_freenet_price = freenet_price
        
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    send_crypto_rates()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    schedule.every(UPDATE_INTERVAL).minutes.do(send_crypto_rates)
    
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {UPDATE_INTERVAL} –º–∏–Ω—É—Ç.")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    run_scheduler() 